package com.zebrunner.reporting.persistence.dao;

import static org.testng.Assert.assertEquals;
import static org.testng.Assert.assertNotEquals;
import static org.testng.Assert.assertNull;

import com.zebrunner.reporting.persistence.PersistenceTestConfig;
import com.zebrunner.reporting.persistence.dao.mysql.application.ProjectMapper;
import com.zebrunner.reporting.domain.db.Project;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.testng.AbstractTestNGSpringContextTests;
import org.testng.annotations.Test;

@Test
@ContextConfiguration(classes = PersistenceTestConfig.class)
public class ProjectMapperTest extends AbstractTestNGSpringContextTests {
    private static final boolean ENABLED = false;

    private static final Project PROJECT = new Project() {
        private static final long serialVersionUID = 1L;
        {
            setName("n1");
            setDescription("d1");
        }
    };

    @Autowired
    private ProjectMapper projectMapper;

    @Test(enabled = ENABLED)
    public void createProject() {
        projectMapper.createProject(PROJECT);
        assertNotEquals(PROJECT.getId(), 0, "Project ID must be set up by autogenerated keys");
    }

    @Test(enabled = ENABLED, dependsOnMethods = { "createProject" })
    public void getProjectById() {
        checkProject(projectMapper.getProjectById(PROJECT.getId()));
    }

    @Test(enabled = ENABLED, dependsOnMethods = { "createProject" })
    public void getProjectByName() {
        checkProject(projectMapper.getProjectByName(PROJECT.getName()));
    }

    @Test(enabled = ENABLED, dependsOnMethods = { "createProject" })
    public void getAllProjects() {
        checkProject(projectMapper.getAllProjects().get(0));
    }

    @Test(enabled = ENABLED, dependsOnMethods = { "createProject" })
    public void updateProject() {
        PROJECT.setName("n2");
        PROJECT.setDescription("d2");

        projectMapper.updateProject(PROJECT);

        checkProject(projectMapper.getProjectById(PROJECT.getId()));
    }

    /**
     * Turn this in to delete car after all tests
     */
    private static final boolean DELETE_ENABLED = true;

    @Test(enabled = ENABLED && DELETE_ENABLED, dependsOnMethods = { "createProject", "getProjectById", "getProjectByName", "getAllProjects",
            "updateProject" })
    public void deleteProjectById() {
        projectMapper.deleteProjectById(PROJECT.getId());

        assertNull(projectMapper.getProjectById(PROJECT.getId()));
    }

    private void checkProject(Project project) {
        assertEquals(project.getName(), PROJECT.getName(), "Name must match");
        assertEquals(project.getDescription(), PROJECT.getDescription(), "Description must match");
    }
}
