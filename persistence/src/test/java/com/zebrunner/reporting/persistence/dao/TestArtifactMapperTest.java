package com.zebrunner.reporting.persistence.dao;

import static org.testng.Assert.assertEquals;
import static org.testng.Assert.assertNotEquals;
import static org.testng.Assert.assertNull;

import java.util.Date;

import com.zebrunner.reporting.persistence.PersistenceTestConfig;
import com.zebrunner.reporting.persistence.dao.mysql.application.TestArtifactMapper;
import com.zebrunner.reporting.domain.db.TestArtifact;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.testng.AbstractTestNGSpringContextTests;
import org.testng.annotations.Test;

@Test
@ContextConfiguration(classes = PersistenceTestConfig.class)
public class TestArtifactMapperTest extends AbstractTestNGSpringContextTests {
    /**
     * Turn this on to enable this test
     */
    private static final boolean ENABLED = false;

    private static final TestArtifact TEST_ARTIFACT = new TestArtifact() {
        private static final long serialVersionUID = 1L;
        {
            setName("test_artifact1");
            setLink("http://localhost:8080");
            setExpiresAt(new Date());
            setTestId(1L);
        }
    };

    @Autowired
    private TestArtifactMapper testArtifactMapper;

    @Test(enabled = ENABLED)
    public void createTestArtifact() {
        testArtifactMapper.createTestArtifact(TEST_ARTIFACT);

        assertNotEquals(TEST_ARTIFACT.getId(), 0, "TestArtifact ID must be set up by autogenerated keys");
    }

    @Test(enabled = ENABLED, dependsOnMethods = { "createTestArtifact" })
    public void getTestArtifactById() {
        checkTestArtifact(testArtifactMapper.getTestArtifactById(TEST_ARTIFACT.getId()));
    }

    @Test(enabled = ENABLED, dependsOnMethods = { "createTestArtifact" })
    public void getTestArtifactsByTestId() {
        checkTestArtifact(testArtifactMapper.getTestArtifactsByTestId(TEST_ARTIFACT.getTestId()).get(0));
    }

    @Test(enabled = ENABLED, dependsOnMethods = { "createTestArtifact" })
    public void updateTestArtifact() {
        TEST_ARTIFACT.setName("test_artifact1");
        TEST_ARTIFACT.setLink("http://localhost:8082");
        TEST_ARTIFACT.setExpiresAt(new Date());
        TEST_ARTIFACT.setTestId(2L);

        testArtifactMapper.updateTestArtifact(TEST_ARTIFACT);

        checkTestArtifact(testArtifactMapper.getTestArtifactById(TEST_ARTIFACT.getId()));
    }

    /**
     * Turn this in to delete testArtifact after all tests
     */
    private static final boolean DELETE_ENABLED = true;

    @Test(enabled = ENABLED && DELETE_ENABLED, dependsOnMethods = { "createTestArtifact", "getTestArtifactById", "getTestArtifactsByTestId",
            "updateTestArtifact" })
    public void deleteTestArtifact() {
        testArtifactMapper.deleteTestArtifactById(TEST_ARTIFACT.getId());

        assertNull(testArtifactMapper.getTestArtifactById(TEST_ARTIFACT.getId()));
    }

    private void checkTestArtifact(TestArtifact testArtifact) {
        assertEquals(testArtifact.getName(), TEST_ARTIFACT.getName(), "TestArtifact name must match");
        assertEquals(testArtifact.getLink(), TEST_ARTIFACT.getLink(), "TestArtifact link must match");
        assertEquals(testArtifact.getExpiresAt(), TEST_ARTIFACT.getExpiresAt(), "TestArtifact expires at must match");
        assertEquals(testArtifact.getTestId(), TEST_ARTIFACT.getTestId(), "TestArtifact name must match");
    }
}
