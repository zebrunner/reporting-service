package com.zebrunner.reporting.persistence.dao;

import static org.testng.Assert.assertEquals;
import static org.testng.Assert.assertNotEquals;
import static org.testng.Assert.assertNull;

import java.util.Collections;
import java.util.Date;
import java.util.List;

import com.zebrunner.reporting.persistence.PersistenceTestConfig;
import com.zebrunner.reporting.persistence.dao.mysql.application.TestMapper;
import com.zebrunner.reporting.persistence.dao.mysql.application.search.TestSearchCriteria;
import com.zebrunner.reporting.domain.db.Status;
import com.zebrunner.reporting.domain.db.Test;
import com.zebrunner.reporting.domain.db.TestConfig;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.testng.AbstractTestNGSpringContextTests;
import org.testng.Assert;

@org.testng.annotations.Test
@ContextConfiguration(classes = PersistenceTestConfig.class)
public class TestMapperTest extends AbstractTestNGSpringContextTests {
    /**
     * Turn this on to enable this test
     */
    private static final boolean ENABLED = false;

    private static final Test TEST = new Test() {
        private static final long serialVersionUID = 1L;
        {
            TestConfig testConfig = new TestConfig();
            testConfig.setId(1L);
            testConfig.setUrl("http://localhost:8080");
            testConfig.setEnv("QA");
            testConfig.setPlatform("iOS");
            testConfig.setPlatformVersion("9.1");
            testConfig.setBrowser("chrome");
            testConfig.setBrowserVersion("43");
            testConfig.setAppVersion("1.1");
            testConfig.setLocale("en");
            testConfig.setLanguage("GB");
            testConfig.setDevice("Samsung Galaxy S3");

            setName("MyTest");
            setStatus(Status.PASSED);
            setTestArgs("<xml>");
            setTestCaseId(1L);
            setTestRunId(1L);
            setTestGroup("g1");
            setMessage("Hm....");
            setStartTime(new Date());
            setFinishTime(new Date());
            setTestConfig(testConfig);
            setKnownIssue(true);
            setBlocker(true);
            setDependsOnMethods("testLogin");
        }
    };

    @Autowired
    private TestMapper testMapper;

    @org.testng.annotations.Test(enabled = ENABLED)
    public void createTest() {
        testMapper.createTest(TEST);

        assertNotEquals(TEST.getId(), 0, "Test ID must be set up by autogenerated keys");
    }

    @org.testng.annotations.Test(enabled = ENABLED)
    public void searchTests() {
        TestSearchCriteria sc = new TestSearchCriteria();
        sc.setTestRunIds(Collections.singletonList(TEST.getTestRunId()));
        sc.setPageSize(Integer.MAX_VALUE);
        List<Test> tests = testMapper.searchTests(sc);
        int count = testMapper.getTestsSearchCount(sc);
        Assert.assertEquals(tests.size(), count);
    }

    @org.testng.annotations.Test(enabled = ENABLED, dependsOnMethods = { "createTest" })
    public void getTestById() {
        checkTest(testMapper.getTestById(TEST.getId()));
    }

    @org.testng.annotations.Test(enabled = ENABLED, dependsOnMethods = { "createTest" })
    public void updateTest() {
        TEST.setName("MyTest2");
        TEST.setStatus(Status.FAILED);
        TEST.setTestArgs("<xml/>");
        TEST.setTestCaseId(2L);
        TEST.setTestRunId(11L);
        TEST.setTestGroup("g2");
        TEST.setMessage("Aha!");
        TEST.setTestConfig(new TestConfig(2L));
        TEST.setKnownIssue(false);
        TEST.setBlocker(false);
        TEST.setDependsOnMethods("testLogout");

        testMapper.updateTest(TEST);

        checkTest(testMapper.getTestById(TEST.getId()));
    }

    /**
     * Turn this in to delete test after all tests
     */
    private static final boolean DELETE_ENABLED = true;

    /**
     * If true, then <code>deleteTest</code> will be used to delete test after all tests, otherwise -
     * <code>deleteTestById</code>
     */
    private static final boolean DELETE_BY_TEST = false;

    @org.testng.annotations.Test(enabled = ENABLED && DELETE_ENABLED && DELETE_BY_TEST, dependsOnMethods = { "createTest", "getTestById",
            "updateTest" })
    public void deleteTest() {
        testMapper.deleteTest(TEST);

        assertNull(testMapper.getTestById(TEST.getId()));
    }

    @org.testng.annotations.Test(enabled = ENABLED && DELETE_ENABLED && !DELETE_BY_TEST, dependsOnMethods = { "createTest", "getTestById",
            "updateTest", "searchTests" })
    public void deleteTestById() {
        testMapper.deleteTestById((TEST.getId()));

        assertNull(testMapper.getTestById(TEST.getId()));
    }

    private void checkTest(Test test) {
        assertEquals(test.getName(), TEST.getName(), "Name must match");
        assertEquals(test.getStatus(), TEST.getStatus(), "Status must match");
        assertEquals(test.getTestArgs(), TEST.getTestArgs(), "Test args must match");
        assertEquals(test.getTestCaseId(), TEST.getTestCaseId(), "Test case ID must match");
        assertEquals(test.getTestGroup(), TEST.getTestGroup(), "Test group must match");
        assertEquals(test.getTestRunId(), TEST.getTestRunId(), "Test run ID must match");
        assertEquals(test.getMessage(), TEST.getMessage(), "Message must match");
        assertEquals(test.isKnownIssue(), TEST.isKnownIssue(), "Known issue must match");
        assertEquals(test.isBlocker(), TEST.isBlocker(), "Known issue must match");
        assertEquals(test.getDependsOnMethods(), TEST.getDependsOnMethods(), "Depends on methods must match");
        assertEquals(test.getTestConfig().getId(), TEST.getTestConfig().getId(), "Config ID must match");
    }
}
