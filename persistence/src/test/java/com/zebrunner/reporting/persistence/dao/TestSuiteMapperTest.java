package com.zebrunner.reporting.persistence.dao;

import static org.testng.Assert.assertEquals;
import static org.testng.Assert.assertNotEquals;
import static org.testng.Assert.assertNull;

import com.zebrunner.reporting.persistence.PersistenceTestConfig;
import com.zebrunner.reporting.persistence.dao.mysql.application.TestSuiteMapper;
import com.zebrunner.reporting.domain.db.TestSuite;
import com.zebrunner.reporting.domain.db.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DuplicateKeyException;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.testng.AbstractTestNGSpringContextTests;
import org.testng.annotations.Test;

@Test
@ContextConfiguration(classes = PersistenceTestConfig.class)
public class TestSuiteMapperTest extends AbstractTestNGSpringContextTests {
    /**
     * Turn this on to enable this test
     */
    private static final boolean ENABLED = false;

    private static final TestSuite TEST_SUITE = new TestSuite() {
        private static final long serialVersionUID = 1L;
        {
            User user = new User();
            user.setId(1L);

            setUser(user);
            setName("lc-sanity");
            setDescription("Some tests...");
            setFileName("test.txt");
        }
    };

    @Autowired
    private TestSuiteMapper testSuiteMapper;

    @Test(enabled = ENABLED)
    public void createTestSuite() {
        testSuiteMapper.createTestSuite(TEST_SUITE);

        assertNotEquals(TEST_SUITE.getId(), 0, "TestSuite ID must be set up by autogenerated keys");
    }

    @Test(enabled = ENABLED, dependsOnMethods = { "createTestSuite" }, expectedExceptions = { DuplicateKeyException.class })
    public void createTestSuiteFail() {
        testSuiteMapper.createTestSuite(TEST_SUITE);
    }

    @Test(enabled = ENABLED, dependsOnMethods = { "createTestSuite" })
    public void getTestSuiteById() {
        checkTestSuite(testSuiteMapper.getTestSuiteById(TEST_SUITE.getId()));
    }

    @Test(enabled = ENABLED, dependsOnMethods = { "createTestSuite" })
    public void getTestSuiteByName() {
        checkTestSuite(testSuiteMapper.getTestSuiteByName(TEST_SUITE.getName()));
    }

    @Test(enabled = ENABLED, dependsOnMethods = { "createTestSuite" })
    public void updateTestSuite() {
        TEST_SUITE.getUser().setId(2L);
        TEST_SUITE.setName("lc-regression");
        TEST_SUITE.setDescription("New description...");

        testSuiteMapper.updateTestSuite(TEST_SUITE);

        checkTestSuite(testSuiteMapper.getTestSuiteById(TEST_SUITE.getId()));
    }

    /**
     * Turn this in to delete testSuite after all tests
     */
    private static final boolean DELETE_ENABLED = true;

    /**
     * If true, then <code>deleteTestSuite</code> will be used to delete testSuite after all tests, otherwise -
     * <code>deleteTestSuiteById</code>
     */
    private static final boolean DELETE_BY_TEST_SUITE = false;

    @Test(enabled = ENABLED && DELETE_ENABLED && DELETE_BY_TEST_SUITE, dependsOnMethods = { "createTestSuite", "createTestSuiteFail",
            "getTestSuiteById", "getTestSuiteByName", "updateTestSuite" })
    public void deleteTestSuite() {
        testSuiteMapper.deleteTestSuite(TEST_SUITE);

        assertNull(testSuiteMapper.getTestSuiteById(TEST_SUITE.getId()));
    }

    @Test(enabled = ENABLED && DELETE_ENABLED && !DELETE_BY_TEST_SUITE, dependsOnMethods = { "createTestSuite", "createTestSuiteFail",
            "getTestSuiteById", "getTestSuiteByName", "updateTestSuite" })
    public void deleteTestSuiteById() {
        testSuiteMapper.deleteTestSuiteById((TEST_SUITE.getId()));

        assertNull(testSuiteMapper.getTestSuiteById(TEST_SUITE.getId()));
    }

    private void checkTestSuite(TestSuite testSuite) {
        assertEquals(testSuite.getDescription(), TEST_SUITE.getDescription(), "Description must match");
        assertEquals(testSuite.getName(), TEST_SUITE.getName(), "TestSuite name must match");
        assertEquals(testSuite.getUser().getId(), TEST_SUITE.getUser().getId(), "User ID must match");
    }
}
