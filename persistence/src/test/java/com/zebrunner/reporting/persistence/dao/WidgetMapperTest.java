package com.zebrunner.reporting.persistence.dao;

import com.zebrunner.reporting.persistence.PersistenceTestConfig;
import com.zebrunner.reporting.persistence.dao.mysql.application.WidgetMapper;
import com.zebrunner.reporting.domain.db.Widget;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.testng.AbstractTestNGSpringContextTests;
import org.testng.annotations.Test;
import static org.testng.Assert.*;

@Test
@ContextConfiguration(classes = PersistenceTestConfig.class)
public class WidgetMapperTest extends AbstractTestNGSpringContextTests {
    @Autowired
    private WidgetMapper widgetMapper;

    /**
     * Turn this on to enable this test
     */
    private static final boolean ENABLED = false;

    private static final Widget WIDGET = new Widget() {
        private static final long serialVersionUID = 1L;
        {
            setModel("m1");
            setSql("s1");
            setTitle("t1");
            setType("wt1");
        }
    };

    @Test(enabled = ENABLED)
    public void createWidget() {
        widgetMapper.createWidget(WIDGET);
        assertNotEquals(WIDGET.getId(), 0, "Widget ID must be set up by autogenerated keys");
    }

    @Test(enabled = ENABLED, dependsOnMethods = { "createWidget" })
    public void getWidgetById() {
        checkWidget(widgetMapper.getWidgetById(WIDGET.getId()));
    }

    @Test(enabled = ENABLED, dependsOnMethods = { "createWidget" })
    public void getAllWidgets() {
        checkWidget(widgetMapper.getAllWidgets().get(0));
    }

    @Test(enabled = ENABLED, dependsOnMethods = { "createWidget" })
    public void updateWidget() {
        WIDGET.setModel("m2");
        WIDGET.setSql("s2");
        WIDGET.setTitle("t2");
        WIDGET.setType("wt2");

        widgetMapper.updateWidget(WIDGET);

        checkWidget(widgetMapper.getWidgetById(WIDGET.getId()));
    }

    @Test(enabled = ENABLED, dependsOnMethods = { "createWidget", "getWidgetById", "getAllWidgets", "updateWidget" })
    public void deleteWidgetById() {
        widgetMapper.deleteWidgetById((WIDGET.getId()));
        assertNull(widgetMapper.getWidgetById(WIDGET.getId()));
    }

    private void checkWidget(Widget widget) {
        assertEquals(widget.getTitle(), WIDGET.getTitle(), "Widget title must match");
        assertEquals(widget.getModel(), WIDGET.getModel(), "Widget model match");
        assertEquals(widget.getSql(), WIDGET.getSql(), "Widget sql must match");
        assertEquals(widget.getType(), WIDGET.getType(), "Widget type must match");
    }
}
