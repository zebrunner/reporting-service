package com.zebrunner.reporting.persistence.dao;

import static org.testng.Assert.assertEquals;
import static org.testng.Assert.assertNotEquals;
import static org.testng.Assert.assertNull;

import com.zebrunner.reporting.persistence.PersistenceTestConfig;
import com.zebrunner.reporting.persistence.dao.mysql.application.JobMapper;
import com.zebrunner.reporting.domain.db.Job;
import com.zebrunner.reporting.domain.db.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DuplicateKeyException;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.testng.AbstractTestNGSpringContextTests;
import org.testng.annotations.Test;

@Test
@ContextConfiguration(classes = PersistenceTestConfig.class)
public class JobMapperTest extends AbstractTestNGSpringContextTests {
    /**
     * Turn this on to enable this test
     */
    private static final boolean ENABLED = false;

    private static final Job JOB = new Job() {
        private static final long serialVersionUID = 1L;
        {
            User user = new User();
            user.setId(1L);

            setUser(user);
            setName("lc_sanity");
            setJobURL("http://localhost:8080/lc_sanity");
            setJenkinsHost("http://localhost:8080");
        }
    };

    @Autowired
    private JobMapper jobMapper;

    @Test(enabled = ENABLED)
    public void createJob() {
        jobMapper.createJob(JOB);

        assertNotEquals(JOB.getId(), 0, "Job ID must be set up by autogenerated keys");
    }

    @Test(enabled = ENABLED, dependsOnMethods = { "createJob" }, expectedExceptions = { DuplicateKeyException.class })
    public void createJobFail() {
        jobMapper.createJob(JOB);
    }

    @Test(enabled = ENABLED, dependsOnMethods = { "createJob" })
    public void getJobById() {
        checkJob(jobMapper.getJobById(JOB.getId()));
    }

    @Test(enabled = ENABLED, dependsOnMethods = { "createJob" })
    public void getJobByName() {
        checkJob(jobMapper.getJobByName(JOB.getName()));
    }

    @Test(enabled = ENABLED, dependsOnMethods = { "createJob" })
    public void updateJob() {
        JOB.getUser().setId(2L);
        JOB.setName("lc_regression");
        JOB.setJobURL("http://10.2.3.2:8080/lc_regression");
        JOB.setJenkinsHost("http://10.2.3.2:8080");

        jobMapper.updateJob(JOB);

        checkJob(jobMapper.getJobById(JOB.getId()));
    }

    /**
     * Turn this in to delete job after all tests
     */
    private static final boolean DELETE_ENABLED = true;

    /**
     * If true, then <code>deleteJob</code> will be used to delete job after all tests, otherwise -
     * <code>deleteJobById</code>
     */
    private static final boolean DELETE_BY_JOB = false;

    @Test(enabled = ENABLED && DELETE_ENABLED && DELETE_BY_JOB, dependsOnMethods = { "createJob", "createJobFail", "getJobById", "getJobByName",
            "updateJob" })
    public void deleteJob() {
        jobMapper.deleteJob(JOB);

        assertNull(jobMapper.getJobById(JOB.getId()));
    }

    @Test(enabled = ENABLED && DELETE_ENABLED && !DELETE_BY_JOB, dependsOnMethods = { "createJob", "createJobFail", "getJobById", "getJobByName",
            "updateJob" })
    public void deleteJobById() {
        jobMapper.deleteJobById((JOB.getId()));

        assertNull(jobMapper.getJobById(JOB.getId()));
    }

    private void checkJob(Job job) {
        assertEquals(job.getName(), JOB.getName(), "Job name must match");
        assertEquals(job.getJobURL(), JOB.getJobURL(), "Job URL must match");
        assertEquals(job.getJenkinsHost(), JOB.getJenkinsHost(), "Jenkins host must match");
        assertEquals(job.getUser().getId(), JOB.getUser().getId(), "User ID must match");
    }
}
