<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper
        namespace="com.zebrunner.reporting.persistence.dao.mysql.application.TestRunMapper">

    <insert id="createTestRun" useGeneratedKeys="true"
            keyProperty="id">
        <![CDATA[
			INSERT INTO TEST_RUNS (CI_RUN_ID, USER_ID, TEST_SUITE_ID, STATUS, SCM_URL, SCM_BRANCH, SCM_COMMIT, CONFIG_XML, WORK_ITEM_ID, JOB_ID, UPSTREAM_JOB_ID, UPSTREAM_JOB_BUILD_NUMBER, BUILD_NUMBER, CONFIG_ID,
			]]>
        <if test="null != project and null != project.id">
            PROJECT_ID,
        </if>
        <![CDATA[
			STARTED_BY, KNOWN_ISSUE, BLOCKER, STARTED_AT, ELAPSED, ETA, COMMENTS, SLACK_CHANNELS)
			VALUES (
				#{ciRunId},
				#{user.id},
			    #{testSuite.id},
				#{status},
				#{scmURL},
				#{scmBranch},
				#{scmCommit},
				#{configXML},
				#{workItem.id},
				#{job.id},
				#{upstreamJob.id},
				#{upstreamJobBuildNumber},
				#{buildNumber},
				#{config.id},
		]]>
        <if test="null != project and null != project.id">
            <![CDATA[
				#{project.id},
			]]>
        </if>
        <![CDATA[
				#{startedBy},
				#{knownIssue},
				#{blocker},
				#{startedAt},
				#{elapsed},
				#{eta},
				#{comments},
				#{slackChannels}
			)
		]]>
    </insert>

    <sql id="getTestRun">
		<![CDATA[
        SELECT TR.ID                        AS TEST_RUN_ID,
               TR.CI_RUN_ID                 AS TEST_RUN_CI_RUN_ID,
               TR.USER_ID                   AS TEST_RUN_USER_ID,
               TR.TEST_SUITE_ID             AS TEST_RUN_TEST_SUITE_ID,
               TR.STATUS                    AS TEST_RUN_STATUS,
               TR.SCM_URL                   AS TEST_RUN_SCM_URL,
               TR.SCM_BRANCH                AS TEST_RUN_SCM_BRANCH,
               TR.SCM_COMMIT                AS TEST_RUN_SCM_COMMIT,
               TR.CONFIG_XML                AS TEST_RUN_CONFIG_XML,
               TR.WORK_ITEM_ID              AS TEST_RUN_WORK_ITEM_ID,
               TR.JOB_ID                    AS TEST_RUN_JOB_ID,
               TR.UPSTREAM_JOB_ID           AS TEST_RUN_UPSTREAM_JOB_ID,
               TR.UPSTREAM_JOB_BUILD_NUMBER AS TEST_RUN_UPSTREAM_JOB_BUILD_NUMBER,
               TR.BUILD_NUMBER              AS TEST_RUN_BUILD_NUMBER,
               TR.CONFIG_ID                 AS TEST_RUN_CONFIG_ID,
               TR.STARTED_BY                AS TEST_RUN_STARTED_BY,
               TR.KNOWN_ISSUE               AS TEST_RUN_KNOWN_ISSUE,
               TR.BLOCKER                   AS TEST_RUN_BLOCKER,
               TR.STARTED_AT                AS TEST_RUN_STARTED_AT,
               TR.ELAPSED                   AS TEST_RUN_ELAPSED,
               TR.ETA                       AS TEST_RUN_ETA,
               TR.COMMENTS                  AS TEST_RUN_COMMENTS,
               TR.SLACK_CHANNELS            AS TEST_RUN_SLACK_CHANNELS,
               TR.REVIEWED                  AS TEST_RUN_REVIEWED,
               TR.MODIFIED_AT               AS TEST_RUN_MODIFIED_AT,
               TR.CREATED_AT                AS TEST_RUN_CREATED_AT,

               C.ID                         AS TEST_RUN_CONFIG_ID,
               C.URL                        AS TEST_RUN_CONFIG_URL,
               C.ENV                        AS TEST_RUN_CONFIG_ENV,
               C.PLATFORM                   AS TEST_RUN_CONFIG_PLATFORM,
               C.PLATFORM_VERSION           AS TEST_RUN_CONFIG_PLATFORM_VERSION,
               C.BROWSER                    AS TEST_RUN_CONFIG_BROWSER,
               C.BROWSER_VERSION            AS TEST_RUN_CONFIG_BROWSER_VERSION,
               C.APP_VERSION                AS TEST_RUN_CONFIG_APP_VERSION,
               C.LOCALE                     AS TEST_RUN_CONFIG_LOCALE,
               C.LANGUAGE                   AS TEST_RUN_CONFIG_LANGUAGE,
               C.DEVICE                     AS TEST_RUN_CONFIG_DEVICE,
               C.MODIFIED_AT                AS TEST_RUN_CONFIG_MODIFIED_AT,
               C.CREATED_AT                 AS TEST_RUN_CONFIG_CREATED_AT,

               P.ID                         AS TEST_RUN_PROJECT_ID,
               P.NAME                       AS TEST_RUN_PROJECT_NAME,
               P.DESCRIPTION                AS TEST_RUN_PROJECT_DESCRIPTION,
               P.MODIFIED_AT                AS TEST_RUN_PROJECT_MODIFIED_AT,
               P.CREATED_AT                 AS TEST_RUN_PROJECT_CREATED_AT

        FROM TEST_RUNS TR
                 LEFT JOIN PROJECTS P
                           ON TR.PROJECT_ID = P.ID
                 LEFT JOIN TEST_CONFIGS C
                           ON TR.CONFIG_ID = C.ID
        ]]>
	</sql>

    <sql id="getTestRunFull">
        <![CDATA[
			SELECT
				TR.ID AS TEST_RUN_ID,
				TR.CI_RUN_ID AS TEST_RUN_CI_RUN_ID,
				TR.STATUS AS TEST_RUN_STATUS,
				TR.SCM_URL AS TEST_RUN_SCM_URL,
				TR.SCM_BRANCH AS TEST_RUN_SCM_BRANCH,
				TR.SCM_COMMIT AS TEST_RUN_SCM_COMMIT,
				TR.CONFIG_XML AS TEST_RUN_CONFIG_XML,
				TR.WORK_ITEM_ID AS TEST_RUN_WORK_ITEM_ID,
				TR.UPSTREAM_JOB_ID AS TEST_RUN_UPSTREAM_JOB_ID,
				TR.UPSTREAM_JOB_BUILD_NUMBER AS TEST_RUN_UPSTREAM_JOB_BUILD_NUMBER,
				TR.BUILD_NUMBER AS TEST_RUN_BUILD_NUMBER,
				TR.STARTED_BY AS TEST_RUN_STARTED_BY,
				TR.KNOWN_ISSUE AS TEST_RUN_KNOWN_ISSUE,
				TR.BLOCKER AS TEST_RUN_BLOCKER,
				TR.STARTED_AT AS TEST_RUN_STARTED_AT,
				TR.ELAPSED AS TEST_RUN_ELAPSED,
				TR.ETA AS TEST_RUN_ETA,
				TR.COMMENTS AS TEST_RUN_COMMENTS,
				TR.SLACK_CHANNELS AS TEST_RUN_SLACK_CHANNELS,
				TR.REVIEWED AS TEST_RUN_REVIEWED,
				(SELECT COUNT(*) FROM TESTS T WHERE T.TEST_RUN_ID = TR.ID AND T.STATUS = 'PASSED') AS TEST_RUN_PASSED,
				(SELECT COUNT(*) FROM TESTS T WHERE T.TEST_RUN_ID = TR.ID AND T.STATUS = 'FAILED') AS TEST_RUN_FAILED,
				(SELECT COUNT(*) FROM TESTS T WHERE T.TEST_RUN_ID = TR.ID AND T.STATUS = 'FAILED' AND T.KNOWN_ISSUE = TRUE) AS TEST_RUN_FAILED_AS_KNOWN,
				(SELECT COUNT(*) FROM TESTS T WHERE T.TEST_RUN_ID = TR.ID AND T.STATUS = 'FAILED' AND T.BLOCKER = TRUE) AS TEST_RUN_FAILED_AS_BLOCKER,
				(SELECT COUNT(*) FROM TESTS T WHERE T.TEST_RUN_ID = TR.ID AND T.STATUS = 'SKIPPED') AS TEST_RUN_SKIPPED,
				(SELECT COUNT(*) FROM TESTS T WHERE T.TEST_RUN_ID = TR.ID AND T.STATUS = 'IN_PROGRESS') AS TEST_RUN_IN_PROGRESS,
				(SELECT COUNT(*) FROM TESTS T WHERE T.TEST_RUN_ID = TR.ID AND T.STATUS = 'ABORTED') AS TEST_RUN_ABORTED,
				(SELECT COUNT(*) FROM TESTS T WHERE T.TEST_RUN_ID = TR.ID AND T.STATUS = 'QUEUED') AS TEST_RUN_QUEUED,
				TR.MODIFIED_AT AS TEST_RUN_MODIFIED_AT,
				TR.CREATED_AT AS TEST_RUN_CREATED_AT,

				U.ID AS TEST_RUN_USER_ID,
				U.USERNAME AS TEST_RUN_USER_USER_NAME,
				U.EMAIL AS TEST_RUN_USER_EMAIL,
				U.FIRST_NAME AS TEST_RUN_USER_FIRST_NAME,
				U.LAST_NAME AS TEST_RUN_USER_LAST_NAME,
				U.COVER_PHOTO_URL AS TEST_RUN_USER_COVER_PHOTO_URL,

				C.ID AS TEST_RUN_CONFIG_ID,
				C.URL AS TEST_RUN_CONFIG_URL,
				C.ENV AS TEST_RUN_CONFIG_ENV,
				C.PLATFORM AS TEST_RUN_CONFIG_PLATFORM,
				C.PLATFORM_VERSION AS TEST_RUN_CONFIG_PLATFORM_VERSION,
				C.BROWSER AS TEST_RUN_CONFIG_BROWSER,
				C.BROWSER_VERSION AS TEST_RUN_CONFIG_BROWSER_VERSION,
				C.APP_VERSION AS TEST_RUN_CONFIG_APP_VERSION,
				C.LOCALE AS TEST_RUN_CONFIG_LOCALE,
				C.LANGUAGE AS TEST_RUN_CONFIG_LANGUAGE,
				C.DEVICE AS TEST_RUN_CONFIG_DEVICE,
				C.MODIFIED_AT AS TEST_RUN_CONFIG_MODIFIED_AT,
				C.CREATED_AT AS TEST_RUN_CONFIG_CREATED_AT,

				TS.ID AS TEST_RUN_TEST_SUITE_ID,
				TS.NAME AS TEST_RUN_TEST_SUITE_NAME,
				TS.FILE_NAME AS TEST_RUN_TEST_SUITE_FILE_NAME,
				TS.DESCRIPTION AS TEST_RUN_TEST_SUITE_DESCRIPTION,

				J.ID AS TEST_RUN_JOB_ID,
				J.NAME AS TEST_RUN_JOB_NAME,
				J.JOB_URL AS TEST_RUN_JOB_JOB_URL,
				J.JENKINS_HOST AS TEST_RUN_JOB_JENKINS_HOST,
			    J.AUTOMATION_SERVER_ID AS TEST_RUN_JOB_AUTOMATION_SERVER_ID,

				P.ID AS TEST_RUN_PROJECT_ID,
				P.NAME AS TEST_RUN_PROJECT_NAME,
				P.DESCRIPTION AS TEST_RUN_PROJECT_DESCRIPTION,
				P.MODIFIED_AT AS TEST_RUN_PROJECT_MODIFIED_AT,
				P.CREATED_AT AS TEST_RUN_PROJECT_CREATED_AT
		]]>
        <include refid="testRunFullJoinPart"/>
    </sql>

    <sql id="testRunFullJoinPart">
		<![CDATA[
        FROM
				TEST_RUNS TR
			LEFT JOIN USERS U
				ON TR.USER_ID = U.ID
			LEFT JOIN TEST_CONFIGS C
				ON TR.CONFIG_ID = C.ID
			LEFT JOIN JOBS J
				ON TR.JOB_ID = J.ID
			LEFT JOIN TEST_SUITES TS
				ON TR.TEST_SUITE_ID = TS.ID
			LEFT JOIN PROJECTS P
				ON TR.PROJECT_ID = P.ID
        ]]>
	</sql>

    <select id="getTestRunById" resultMap="TestRunResultMap">
        <include refid="getTestRun"/>
        <![CDATA[
			WHERE TR.ID = #{id};
		]]>
    </select>

    <select id="getTestRunByCiRunId" resultMap="TestRunResultMap">
        <include refid="getTestRun"/>
        <![CDATA[
			WHERE TR.CI_RUN_ID = #{ciRunId};
		]]>
    </select>

    <sql id="getTestRunStatistic">
		<![CDATA[
        SELECT TR.ID                                                                               AS TEST_RUN_ID,
               TR.REVIEWED                                                                         AS TEST_RUN_REVIEWED,
               (SELECT COUNT(*) FROM TESTS T WHERE T.TEST_RUN_ID = TR.ID AND T.STATUS = 'PASSED')  AS TEST_RUN_PASSED,
               (SELECT COUNT(*) FROM TESTS T WHERE T.TEST_RUN_ID = TR.ID AND T.STATUS = 'FAILED')  AS TEST_RUN_FAILED,
               (SELECT COUNT(*)
                FROM TESTS T
                WHERE T.TEST_RUN_ID = TR.ID
                  AND T.STATUS = 'FAILED'
                  AND T.KNOWN_ISSUE = TRUE)                                                        AS TEST_RUN_FAILED_AS_KNOWN,
               (SELECT COUNT(*)
                FROM TESTS T
                WHERE T.TEST_RUN_ID = TR.ID
                  AND T.STATUS = 'FAILED'
                  AND T.BLOCKER = TRUE)                                                            AS TEST_RUN_FAILED_AS_BLOCKER,
               (SELECT COUNT(*) FROM TESTS T WHERE T.TEST_RUN_ID = TR.ID AND T.STATUS = 'SKIPPED') AS TEST_RUN_SKIPPED,
               (SELECT COUNT(*) FROM TESTS T WHERE T.TEST_RUN_ID = TR.ID AND T.STATUS = 'QUEUED')  AS TEST_RUN_QUEUED
        FROM TEST_RUNS TR
        ]]>
	</sql>

    <select id="getTestRunStatistics"
            resultMap="TestRunStatisticResultMap">
        <include refid="getTestRunStatistic"/>
        <![CDATA[
			WHERE
				TR.ID = #{id}
		]]>
    </select>

    <select id="getTestRunsByUpstreamJobIdAndUpstreamJobBuildNumber"
            resultMap="TestRunResultMap">
        <include refid="getTestRunFull"/>
        <![CDATA[
			WHERE TR.UPSTREAM_JOB_ID = #{jobId} AND TR.UPSTREAM_JOB_BUILD_NUMBER = #{buildNumber};
		]]>
    </select>

    <sql id="filterWhereClause">
        <if test="null != filterSearchCriteria">
            ${filterSearchCriteria.filterWhereClause}
        </if>
        <if test="null != projects">
            <foreach item="project" index="index" collection="projects"
                     open="AND (" separator=" OR " close=")">
                <if test="null != project.id">
                    <![CDATA[
							TR.PROJECT_ID = #{project.id}
						]]>
                </if>
            </foreach>
        </if>
    </sql>

    <sql id="testRunSearchWhereClause">
        <trim prefix="WHERE" prefixOverrides="AND |OR ">
            <if test="null != id">
                <![CDATA[
				   AND TR.ID = #{id}
				]]>
            </if>
            <if test="null != query">
                <![CDATA[
					AND (
				   		LOWER(TS.NAME) LIKE LOWER(CONCAT('%', #{query}, '%'))
				   		OR LOWER(CONCAT(J.JOB_URL, '/', TR.BUILD_NUMBER)) LIKE LOWER(CONCAT('%', #{query}, '%'))
				   		OR LOWER(C.APP_VERSION) LIKE LOWER(CONCAT('%', #{query}, '%'))
			   		)
				]]>
            </if>
            <if test="null != testSuiteId">
                <![CDATA[
				   AND TS.ID = #{testSuiteId}
				]]>
            </if>
            <if test="null != environment">
                <![CDATA[
				   AND LOWER(C.ENV) = LOWER(#{environment})
				]]>
            </if>
            <if test="null != platform">
                <![CDATA[
				   AND LOWER(C.PLATFORM) = LOWER(#{platform})
				]]>
            </if>
            <if test="null != browser">
                <![CDATA[
				   AND LOWER(C.BROWSER) = LOWER(#{browser})
				]]>
            </if>
            <if test="null != date">
                <![CDATA[
				   AND TR.STARTED_AT BETWEEN #{date}::timestamp AND #{date}::timestamp + '24:00:00'::interval
				]]>
            </if>
            <if test="null != fromDate">
                <![CDATA[
				   AND TR.STARTED_AT::date >= #{fromDate}::date
				]]>
            </if>
            <if test="null != toDate">
                <![CDATA[
				   AND TR.STARTED_AT::date <= #{toDate}::date
				]]>
            </if>
            <if test="null != projects">
                <foreach item="project" index="index" collection="projects"
                         open="AND (" separator=" OR " close=")">
                    <if test="null != project.id">
                        <![CDATA[
							TR.PROJECT_ID = #{project.id}
						]]>
                    </if>
                </foreach>
            </if>
            <if test="null != status">
                <![CDATA[
				   AND TR.STATUS = #{status}
				]]>
            </if>
            <if test="null == status and null == id">
                <![CDATA[
				   AND TR.STATUS <> 'QUEUED'
				]]>
            </if>
            <if test="null != reviewed">
                <![CDATA[
				   AND TR.REVIEWED = #{reviewed}
				]]>
            </if>
        </trim>
    </sql>

    <select id="searchTestRuns" resultMap="TestRunResultMap">
        <include refid="getTestRunFull"/>
        <choose>
            <when test="null != filterSearchCriteria">
                <include refid="filterWhereClause"/>
            </when>
            <otherwise>
                <include refid="testRunSearchWhereClause"/>
            </otherwise>
        </choose>
        <if test="sortOrder.toString() == 'ASC'">
            <![CDATA[
				ORDER BY TR.STARTED_AT ASC
			]]>
        </if>
        <if test="sortOrder.toString() == 'DESC'">
            <![CDATA[
				ORDER BY TR.STARTED_AT DESC
			]]>
        </if>
        <![CDATA[
			LIMIT #{pageSize} OFFSET #{offset}
		]]>
    </select>

    <select id="getTestRunsSearchCount"
            resultType="java.lang.Integer">
        <![CDATA[
				SELECT
					COUNT(*)
			]]>
        <include refid="testRunFullJoinPart"/>
        <choose>
            <when test="null != filterSearchCriteria">
                <include refid="filterWhereClause"/>
            </when>
            <otherwise>
                <include refid="testRunSearchWhereClause"/>
            </otherwise>
        </choose>
    </select>

    <select id="getTestRunsForSmartRerun"
            resultMap="NightlyViewResultMap">
        <![CDATA[
        SELECT
               NV.UPSTREAM_JOB_ID,
               NV.UPSTREAM_JOB_BUILD_NUMBER,
               NV.JOB_NAME,
               NV.JOB_URL,
               NV.BUILD_NUMBER,
               NV.TEST_SUITE_NAME,
               NV.TEST_RUN_ID
        FROM
             NIGHTLY_VIEW NV
        ]]>
        <trim prefix="WHERE" prefixOverrides="AND |OR ">
            <![CDATA[ AND NV.UPSTREAM_JOB_ID = #{upstreamJobId}
                      AND NV.UPSTREAM_JOB_BUILD_NUMBER = #{upstreamJobBuildNumber}
                      AND NV.TEST_RUN_STATUS <> 'IN_PROGRESS' ]]>
            <if test="null != scmURL and scmURL != ''">
                <![CDATA[ AND LOWER(NV.SCM_URL) LIKE LOWER(CONCAT('%', #{scmURL}, '%')) ]]>
            </if>
            <if test="null != owner and owner != ''">
                <![CDATA[ AND LOWER(NV.OWNER_USERNAME) LIKE LOWER(CONCAT('%', #{owner}, '%'))]]>
            </if>

            <if test="null != hashcode">
                <![CDATA[ AND NV.MESSAGE_HASHCODE = #{hashcode}]]>
            </if>
            <if test="null != failurePercent">
                <![CDATA[ AND (100.0 * (NV.FAILED + NV.SKIPPED + NV.ABORTED + NV.QUEUED)/NV.TOTAL)::integer > #{failurePercent} ]]>
            </if>
            <if test="null != cause and cause != ''">
                <![CDATA[ AND LOWER(NV.MESSAGE) LIKE LOWER(CONCAT('%', #{cause}, '%')) ]]>
            </if>
        </trim>
        GROUP BY
        NV.UPSTREAM_JOB_ID,
        NV.UPSTREAM_JOB_BUILD_NUMBER,
        NV.JOB_NAME,
        NV.JOB_URL,
        NV.BUILD_NUMBER,
        NV.TEST_SUITE_NAME,
        NV.TEST_RUN_ID
    </select>

    <select id="getTestRunEtaByTestSuiteId"
            resultType="java.lang.Integer">
	    <![CDATA[
        SELECT avg(ELAPSED)::int AS ETA
        FROM (
                 SELECT TR.ELAPSED                                                     AS ELAPSED,
                        row_number() OVER (ORDER BY TR.ELAPSED)                        AS hi,
                        count(*) OVER () + 1 - row_number() OVER (ORDER BY TR.ELAPSED) AS lo
                 FROM TEST_RUNS TR
                 WHERE TR.TEST_SUITE_ID = #{testSuiteId}
                   AND TR.ELAPSED IS NOT NULL
                 ORDER BY TR.STARTED_AT DESC
                 LIMIT 50
                 OFFSET
                 0
             ) qs
        WHERE hi IN (lo - 1, lo, lo + 1);
        ]]>
	</select>

    <select id="getTestRunByIdFull" resultMap="TestRunResultMap">
        <include refid="getTestRunFull"/>
        <![CDATA[
			WHERE TR.ID = #{id};
		]]>
    </select>

    <select id="getTestRunByCiRunIdFull"
            resultMap="TestRunResultMap">
        <include refid="getTestRunFull"/>
        <![CDATA[
			WHERE TR.CI_RUN_ID = #{ciRunId};
		]]>
    </select>

    <select id="getTestRunsForRerun" resultMap="TestRunResultMap">
        <include refid="getTestRun"/>
        <![CDATA[
			WHERE
				TR.TEST_SUITE_ID = #{testSuiteId} AND
				TR.JOB_ID = #{jobId} AND
				TR.UPSTREAM_JOB_ID = #{upstreamJobId} AND
				TR.UPSTREAM_JOB_BUILD_NUMBER = #{upstreamBuildNumber}
		]]>
        <if test="uniqueArgs != null and uniqueArgs.size > 0">
            <foreach item="arg" index="index" collection="uniqueArgs"
                     open="AND " separator=" AND " close=";">
                <![CDATA[CONFIG_XML LIKE CONCAT('%<key>', #{arg.key}, '</key><value>', #{arg.value}, '</value>%')]]>
            </foreach>
        </if>
    </select>

    <select id="getTestRunsByStatusAndStartedBefore"
            resultMap="TestRunResultMap">
        <include refid="getTestRun"/>
        <![CDATA[
			WHERE TR.STATUS = #{status} AND TR.CREATED_AT < #{startedBefore}
		]]>
    </select>

    <select id="getLatestJobTestRuns" resultMap="TestRunResultMap">
        <![CDATA[
        SELECT TR.ID                                                 AS TEST_RUN_ID,
               TR.CI_RUN_ID                                          AS TEST_RUN_CI_RUN_ID,
               TR.USER_ID                                            AS TEST_RUN_USER_ID,
               TR.TEST_SUITE_ID                                      AS TEST_RUN_TEST_SUITE_ID,
               TR.STATUS                                             AS TEST_RUN_STATUS,
               TR.SCM_URL                                            AS TEST_RUN_SCM_URL,
               TR.SCM_BRANCH                                         AS TEST_RUN_SCM_BRANCH,
               TR.SCM_COMMIT                                         AS TEST_RUN_SCM_COMMIT,
               TR.CONFIG_XML                                         AS TEST_RUN_CONFIG_XML,
               TR.WORK_ITEM_ID                                       AS TEST_RUN_WORK_ITEM_ID,
               TR.JOB_ID                                             AS TEST_RUN_JOB_ID,
               TR.UPSTREAM_JOB_ID                                    AS TEST_RUN_UPSTREAM_JOB_ID,
               TR.UPSTREAM_JOB_BUILD_NUMBER                          AS TEST_RUN_UPSTREAM_JOB_BUILD_NUMBER,
               TR.BUILD_NUMBER                                       AS TEST_RUN_BUILD_NUMBER,
               TR.STARTED_BY                                         AS TEST_RUN_STARTED_BY,
               TR.KNOWN_ISSUE                                        AS TEST_RUN_KNOWN_ISSUE,
               TR.BLOCKER                                            AS TEST_RUN_BLOCKER,
               TR.STARTED_AT                                         AS TEST_RUN_STARTED_AT,
               TR.ELAPSED                                            AS TEST_RUN_ELAPSED,
               TR.ETA                                                AS TEST_RUN_ETA,
               TR.COMMENTS                                           AS TEST_RUN_COMMENTS,
               TR.SLACK_CHANNELS                                     AS TEST_RUN_SLACK_CHANNELS,
               TR.REVIEWED                                           AS TEST_RUN_REVIEWED,
               TR.MODIFIED_AT                                        AS TEST_RUN_MODIFIED_AT,
               TR.CREATED_AT                                         AS TEST_RUN_CREATED_AT,
               (SELECT COUNT(*) FROM TESTS T
               WHERE T.TEST_RUN_ID = TR.ID AND T.STATUS = 'PASSED')  AS TEST_RUN_PASSED,
               (SELECT COUNT(*) FROM TESTS T
               WHERE T.TEST_RUN_ID = TR.ID AND T.STATUS = 'FAILED')  AS TEST_RUN_FAILED,
               (SELECT COUNT(*) FROM TESTS T
               WHERE T.TEST_RUN_ID = TR.ID AND T.STATUS = 'SKIPPED') AS TEST_RUN_SKIPPED,

               TC.ID                                                 AS TEST_RUN_CONFIG_ID,
               TC.URL                                                AS TEST_RUN_CONFIG_URL,
               TC.ENV                                                AS TEST_RUN_CONFIG_ENV,
               TC.PLATFORM                                           AS TEST_RUN_CONFIG_PLATFORM,
               TC.PLATFORM_VERSION                                   AS TEST_RUN_CONFIG_PLATFORM_VERSION,
               TC.BROWSER                                            AS TEST_RUN_CONFIG_BROWSER,
               TC.BROWSER_VERSION                                    AS TEST_RUN_CONFIG_BROWSER_VERSION,
               TC.APP_VERSION                                        AS TEST_RUN_CONFIG_APP_VERSION,
               TC.LOCALE                                             AS TEST_RUN_CONFIG_LOCALE,
               TC.LANGUAGE                                           AS TEST_RUN_CONFIG_LANGUAGE,
               TC.DEVICE                                             AS TEST_RUN_CONFIG_DEVICE,
               TC.MODIFIED_AT                                        AS TEST_RUN_CONFIG_MODIFIED_AT,
               TC.CREATED_AT                                         AS TEST_RUN_CONFIG_CREATED_AT

        FROM TEST_RUNS TR
                 JOIN
             TEST_CONFIGS TC
             ON TR.CONFIG_ID = TC.ID
                 INNER JOIN
             (SELECT JOB_ID,
                     MAX(STARTED_AT) AS STARTED_AT
              FROM TEST_RUNS TR
                       JOIN TEST_CONFIGS TC
                            ON TR.CONFIG_ID = TC.ID
              WHERE TR.STARTED_AT >= current_date - interval '2 week'
              GROUP BY TR.JOB_ID, TC.ENV)
                 AS MAX
              USING
                 (JOB_ID, STARTED_AT)
        			WHERE
        				TC.ENV = #{env} AND TR.JOB_ID IN
        		]]>
                <foreach item="jobId" index="index" collection="jobIds"
                         open="(" separator="," close=")">
                    #{jobId}
                </foreach>
    </select>

    <select id="getLatestJobTestRunByBranch"
            resultMap="TestRunResultMap">
        <include refid="getTestRun"/>
        <![CDATA[
			WHERE
				STARTED_AT >= current_date - interval '4 week' AND
				TR.STATUS <> 'IN_PROGRESS' AND
				TR.STATUS <> 'ABORTED' AND
				TR.STATUS <> 'QUEUED' AND
				TR.SCM_BRANCH = #{branch} AND
				TR.JOB_ID = #{jobId}
			ORDER BY TR.STARTED_AT DESC
			LIMIT 1
		]]>
    </select>

    <update id="updateTestRun">
        <![CDATA[
			UPDATE
			    TEST_RUNS
			SET
				CI_RUN_ID = #{ciRunId},
				USER_ID = #{user.id},
				TEST_SUITE_ID = #{testSuite.id},
				STATUS = #{status},
			    SCM_URL = #{scmURL},
			    SCM_BRANCH = #{scmBranch},
			    SCM_COMMIT = #{scmCommit},
			    WORK_ITEM_ID = #{workItem.id},
			    CONFIG_XML = #{configXML},
			    JOB_ID = #{job.id},
			    UPSTREAM_JOB_ID = #{upstreamJob.id},
			    UPSTREAM_JOB_BUILD_NUMBER = #{upstreamJobBuildNumber},
			    BUILD_NUMBER = #{buildNumber},
			    CONFIG_ID = #{config.id},
			]]>
        <if test="null != project and null != project.id">
            <![CDATA[
	               PROJECT_ID = #{project.id},
	            ]]>
        </if>
        <![CDATA[
			    STARTED_BY = #{startedBy},
			    KNOWN_ISSUE = #{knownIssue},
			    BLOCKER = #{blocker},
			    STARTED_AT = #{startedAt},
				ELAPSED = #{elapsed},
				ETA = #{eta},
				COMMENTS = #{comments},
				SLACK_CHANNELS = #{slackChannels},
				REVIEWED = #{reviewed}
			WHERE
			    ID = #{id}
		]]>
    </update>

    <update id="reassignToProject">
		<![CDATA[
        UPDATE TEST_RUNS
        SET PROJECT_ID = #{toProjectId}
        WHERE PROJECT_ID = #{fromProjectId}
        ]]>
	</update>

    <sql id="deleteTestRun">
		<![CDATA[
        DELETE
        FROM TEST_RUNS
        WHERE ID = #{id}
        ]]>
	</sql>

    <delete id="deleteTestRun">
        <include refid="deleteTestRun"/>
    </delete>

    <delete id="deleteTestRunById">
        <include refid="deleteTestRun"/>
    </delete>

    <resultMap type="com.zebrunner.reporting.domain.db.TestRun"
               id="NightlyViewResultMap" autoMapping="false">
        <id column="TEST_RUN_ID" property="id"/>
        <result column="OWNER_ID" property="user.id"/>
        <result column="OWNER_USERNAME" property="user.username"/>
        <result column="EMAIL" property="user.email"/>
        <result column="TEST_SUITE_NAME" property="testSuite.name"/>
        <result column="TEST_RUN_ID" property="id"/>
        <result column="SCM_URL" property="scmURL"/>
        <result column="UPSTREAM_JOB_ID" property="upstreamJob.id"/>
        <result column="UPSTREAM_JOB_BUILD_NUMBER"
                property="upstreamJobBuildNumber"/>
        <result column="BUILD_NUMBER" property="buildNumber"/>
        <result column="ENV" property="config.env"/>
        <result column="STARTED" property="startedAt"/>
        <result column="ELAPSED" property="elapsed"/>
        <result column="JOB_URL" property="job.jobURL"/>
        <result column="JOB_NAME" property="job.name"/>
        <result column="PROJECT" property="project.name"/>
    </resultMap>

    <resultMap type="com.zebrunner.reporting.domain.db.TestRun"
               id="TestRunResultMap" autoMapping="false">
        <id column="TEST_RUN_ID" property="id"/>

        <result column="TEST_RUN_USER_ID" property="user.id"/>
        <result column="TEST_RUN_USER_USER_NAME"
                property="user.username"/>
        <result column="TEST_RUN_USER_EMAIL" property="user.email"/>
        <result column="TEST_RUN_USER_FIRST_NAME"
                property="user.firstName"/>
        <result column="TEST_RUN_USER_LAST_NAME"
                property="user.lastName"/>
        <result column="TEST_RUN_USER_COVER_PHOTO_URL"
                property="user.photoURL"/>

        <result column="TEST_RUN_CONFIG_ID" property="config.id"/>
        <result column="TEST_RUN_CONFIG_URL" property="config.url"/>
        <result column="TEST_RUN_CONFIG_ENV" property="config.env"/>
        <result column="TEST_RUN_CONFIG_PLATFORM"
                property="config.platform"/>
        <result column="TEST_RUN_CONFIG_PLATFORM_VERSION"
                property="config.platformVersion"/>
        <result column="TEST_RUN_CONFIG_BROWSER"
                property="config.browser"/>
        <result column="TEST_RUN_CONFIG_BROWSER_VERSION"
                property="config.browserVersion"/>
        <result column="TEST_RUN_CONFIG_APP_VERSION"
                property="config.appVersion"/>
        <result column="TEST_RUN_CONFIG_LOCALE"
                property="config.locale"/>
        <result column="TEST_RUN_CONFIG_LANGUAGE"
                property="config.language"/>
        <result column="TEST_RUN_CONFIG_DEVICE"
                property="config.device"/>
        <result column="TEST_RUN_CONFIG_MODIFIED_AT"
                property="config.modifiedAt"/>
        <result column="TEST_RUN_CONFIG_CREATED_AT"
                property="config.createdAt"/>

        <result column="TEST_RUN_TEST_SUITE_ID" property="testSuite.id"/>
        <result column="TEST_RUN_TEST_SUITE_NAME"
                property="testSuite.name"/>
        <result column="TEST_RUN_TEST_SUITE_FILE_NAME"
                property="testSuite.fileName"/>
        <result column="TEST_RUN_TEST_SUITE_DESCRIPTION"
                property="testSuite.description"/>

        <result column="TEST_RUN_CI_RUN_ID" property="ciRunId"/>
        <result column="TEST_RUN_STATUS" property="status"/>
        <result column="TEST_RUN_SCM_URL" property="scmURL"/>
        <result column="TEST_RUN_SCM_BRANCH" property="scmBranch"/>
        <result column="TEST_RUN_SCM_COMMIT" property="scmCommit"/>
        <result column="TEST_RUN_WORK_ITEM_ID" property="workItem.id"/>
        <result column="TEST_RUN_CONFIG_XML" property="configXML"/>
        <result column="TEST_RUN_UPSTREAM_JOB_ID"
                property="upstreamJob.id"/>
        <result column="TEST_RUN_UPSTREAM_JOB_BUILD_NUMBER"
                property="upstreamJobBuildNumber"/>
        <result column="TEST_RUN_BUILD_NUMBER" property="buildNumber"/>
        <result column="TEST_RUN_STARTED_BY" property="startedBy"/>
        <result column="TEST_RUN_KNOWN_ISSUE" property="knownIssue"/>
        <result column="TEST_RUN_BLOCKER" property="blocker"/>
        <result column="TEST_RUN_STARTED_AT" property="startedAt"/>
        <result column="TEST_RUN_ELAPSED" property="elapsed"/>
        <result column="TEST_RUN_ETA" property="eta"/>
        <result column="TEST_RUN_COMMENTS" property="comments"/>
        <result column="TEST_RUN_SLACK_CHANNELS"
                property="slackChannels"/>
        <result column="TEST_RUN_REVIEWED" property="reviewed"/>
        <result column="TEST_RUN_PASSED" property="passed"/>
        <result column="TEST_RUN_FAILED" property="failed"/>
        <result column="TEST_RUN_FAILED_AS_KNOWN"
                property="failedAsKnown"/>
        <result column="TEST_RUN_FAILED_AS_BLOCKER"
                property="failedAsBlocker"/>
        <result column="TEST_RUN_SKIPPED" property="skipped"/>
        <result column="TEST_RUN_IN_PROGRESS" property="inProgress"/>
        <result column="TEST_RUN_QUEUED" property="queued"/>
        <result column="TEST_RUN_ABORTED" property="aborted"/>
        <result column="TEST_RUN_MODIFIED_AT" property="modifiedAt"/>
        <result column="TEST_RUN_CREATED_AT" property="createdAt"/>

        <result column="TEST_RUN_JOB_ID" property="job.id"/>
        <result column="TEST_RUN_JOB_NAME" property="job.name"/>
        <result column="TEST_RUN_JOB_JOB_URL" property="job.jobURL"/>
        <result column="TEST_RUN_JOB_JENKINS_HOST"
                property="job.jenkinsHost"/>
        <result column="TEST_RUN_JOB_AUTOMATION_SERVER_ID"
                property="job.automationServerId"/>

        <result column="TEST_RUN_PROJECT_ID" property="project.id"/>
        <result column="TEST_RUN_PROJECT_NAME" property="project.name"/>
        <result column="TEST_RUN_PROJECT_DESCRIPTION"
                property="project.description"/>
        <result column="TEST_RUN_PROJECT_MODIFIED_AT"
                property="project.modifiedAt"/>
        <result column="TEST_RUN_PROJECT_CREATED_AT"
                property="project.createdAt"/>
    </resultMap>

    <resultMap
            type="com.zebrunner.reporting.domain.dto.TestRunStatistics"
            id="TestRunStatisticResultMap" autoMapping="false">
        <id column="TEST_RUN_ID" property="testRunId"/>
        <result column="TEST_RUN_REVIEWED" property="reviewed"/>
        <result column="TEST_RUN_PASSED" property="passed"/>
        <result column="TEST_RUN_FAILED" property="failed"/>
        <result column="TEST_RUN_FAILED_AS_KNOWN"
                property="failedAsKnown"/>
        <result column="TEST_RUN_FAILED_AS_BLOCKER"
                property="failedAsBlocker"/>
        <result column="TEST_RUN_SKIPPED" property="skipped"/>
        <result column="TEST_RUN_QUEUED" property="queued"/>
    </resultMap>

</mapper>
